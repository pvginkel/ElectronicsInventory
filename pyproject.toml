[tool.poetry]
name = "electronics-inventory-backend"
version = "0.1.0"
description = "Flask backend for hobby electronics parts inventory management system"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.scripts]
inventory-cli = "app.cli:main"

[tool.poetry.dependencies]
python = "^3.12"
flask = "^3.0.0"
flask-sqlalchemy = "^3.1.0"
alembic = "^1.13.0"
psycopg = {extras = ["binary"], version = "^3.1.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
spectree = "^1.2.0"
flask-cors = "^4.0.0"
waitress = "^3.0.0"
boto3 = "^1.34.0"
celery = "^5.3.0"
openai = "^1.10.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.0"
mypy = "^1.8.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
types-flask = "^1.1.0"
types-flask-cors = "^4.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = false
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "alembic.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "app.models.*"
disable_error_code = ["attr-defined"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=app --cov-report=term-missing"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
]